{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
    "collapsed": true,
    "papermill": {
     "duration": 0.091079,
     "end_time": "2020-09-27T23:41:42.791418",
     "exception": false,
     "start_time": "2020-09-27T23:41:42.700339",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Background\n",
    "This project focuses on the Exploratory Data Analysis, including data exploration, data preparation, and data cleaning. The dataset of interest here is the training dataset of [Loan Prediction Problem Dataset](https://www.kaggle.com/altruistdelhite04/loan-prediction-problem-dataset). The original problem is to predict customers' loan eligiblity based on their application details. This project does not cover the Loan Prediction steps nor the Machine Learning algorithms.\n",
    "\n",
    "**Data Dictionary:**\n",
    "-           Loan_ID: Unique Loan ID\n",
    "-            Gender: Male/Female\n",
    "-           Married: Applicant married Y/N\n",
    "-        Dependents: Number of dependents\n",
    "-         Education: Graduate/Undergrad\n",
    "-     Self_Employed: Y/N\n",
    "-   ApplicantIncome: Applicant Income\n",
    "- CoapplicantIncome: Coapplicant Income\n",
    "-        LoanAmount: Loan amount in thousands\n",
    "-  Loan_Amount_Term: Term of loan in months\n",
    "-    Credit_History: 1 for meeting the guidelines, 0 for not meeting the guidelines\n",
    "-     Property_Area: Urban/Semi Urban/Rural\n",
    "-       Loan_Status: Loan approved Y/N"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.088094,
     "end_time": "2020-09-27T23:41:42.967748",
     "exception": false,
     "start_time": "2020-09-27T23:41:42.879654",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading Dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:43.152422Z",
     "iopub.status.busy": "2020-09-27T23:41:43.151615Z",
     "iopub.status.idle": "2020-09-27T23:41:44.361905Z",
     "shell.execute_reply": "2020-09-27T23:41:44.362458Z"
    },
    "papermill": {
     "duration": 1.305981,
     "end_time": "2020-09-27T23:41:44.362653",
     "exception": false,
     "start_time": "2020-09-27T23:41:43.056672",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loan_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Married</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>Education</th>\n",
       "      <th>Self_Employed</th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>Credit_History</th>\n",
       "      <th>Property_Area</th>\n",
       "      <th>Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LP001002</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>5849</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LP001003</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>1</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>4583</td>\n",
       "      <td>1508.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LP001005</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LP001006</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>Not Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>2583</td>\n",
       "      <td>2358.0</td>\n",
       "      <td>120.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LP001008</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>Graduate</td>\n",
       "      <td>No</td>\n",
       "      <td>6000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>141.0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
       "0  LP001002   Male      No          0      Graduate            No   \n",
       "1  LP001003   Male     Yes          1      Graduate            No   \n",
       "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
       "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
       "4  LP001008   Male      No          0      Graduate            No   \n",
       "\n",
       "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
       "0             5849                0.0         NaN             360.0   \n",
       "1             4583             1508.0       128.0             360.0   \n",
       "2             3000                0.0        66.0             360.0   \n",
       "3             2583             2358.0       120.0             360.0   \n",
       "4             6000                0.0       141.0             360.0   \n",
       "\n",
       "   Credit_History Property_Area Loan_Status  \n",
       "0             1.0         Urban           Y  \n",
       "1             1.0         Rural           N  \n",
       "2             1.0         Urban           Y  \n",
       "3             1.0         Urban           Y  \n",
       "4             1.0         Urban           Y  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from scipy.stats import chi2_contingency\n",
    "from statsmodels.stats import weightstats as stests\n",
    "import matplotlib.pyplot as plt\n",
    "df = pd.read_csv('../input/loan-prediction-problem-dataset/train_u6lujuX_CVtuZ9i.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.091559,
     "end_time": "2020-09-27T23:41:44.544028",
     "exception": false,
     "start_time": "2020-09-27T23:41:44.452469",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Exploration and Preparation\n",
    "## Variable Identification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.088791,
     "end_time": "2020-09-27T23:41:44.733725",
     "exception": false,
     "start_time": "2020-09-27T23:41:44.644934",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Although we are not going to solve the original Loan Prediction problem here, it is generally helpful to keep the orginal problem in mind while performing the data exploration analysis.\n",
    "Thus the types of variables can be defined as following:\n",
    "\n",
    "**(Possible) Predictor Variable:**\n",
    "- Gender\n",
    "- Married\n",
    "- Dependents\n",
    "- Education\n",
    "- Self_Employed\n",
    "- ApplicantIncome\n",
    "- CoapplicationIncome\n",
    "- LoanAmount\n",
    "- Loan_Amount_Term\n",
    "- Credit_History\n",
    "- Property_Area\n",
    "\n",
    "**Target Variable:**\n",
    "- Loan_Status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:44.918354Z",
     "iopub.status.busy": "2020-09-27T23:41:44.917556Z",
     "iopub.status.idle": "2020-09-27T23:41:44.921578Z",
     "shell.execute_reply": "2020-09-27T23:41:44.920834Z"
    },
    "papermill": {
     "duration": 0.098844,
     "end_time": "2020-09-27T23:41:44.921715",
     "exception": false,
     "start_time": "2020-09-27T23:41:44.822871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(614, 13)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dataset comprises of 614 observations and 13 charateristics\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:45.125487Z",
     "iopub.status.busy": "2020-09-27T23:41:45.124643Z",
     "iopub.status.idle": "2020-09-27T23:41:45.129095Z",
     "shell.execute_reply": "2020-09-27T23:41:45.129661Z"
    },
    "papermill": {
     "duration": 0.118004,
     "end_time": "2020-09-27T23:41:45.129828",
     "exception": false,
     "start_time": "2020-09-27T23:41:45.011824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 614 entries, 0 to 613\n",
      "Data columns (total 13 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Loan_ID            614 non-null    object \n",
      " 1   Gender             601 non-null    object \n",
      " 2   Married            611 non-null    object \n",
      " 3   Dependents         599 non-null    object \n",
      " 4   Education          614 non-null    object \n",
      " 5   Self_Employed      582 non-null    object \n",
      " 6   ApplicantIncome    614 non-null    int64  \n",
      " 7   CoapplicantIncome  614 non-null    float64\n",
      " 8   LoanAmount         592 non-null    float64\n",
      " 9   Loan_Amount_Term   600 non-null    float64\n",
      " 10  Credit_History     564 non-null    float64\n",
      " 11  Property_Area      614 non-null    object \n",
      " 12  Loan_Status        614 non-null    object \n",
      "dtypes: float64(4), int64(1), object(8)\n",
      "memory usage: 62.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.090968,
     "end_time": "2020-09-27T23:41:45.317150",
     "exception": false,
     "start_time": "2020-09-27T23:41:45.226182",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Section Summary\n",
    "\n",
    "The dataset can be separated into the following two variable categories:\n",
    "\n",
    "**Categorical:**\n",
    "- Gender\n",
    "- Married\n",
    "- Education\n",
    "- Self_Employed\n",
    "- Loan_Amount_Term\n",
    "- Credit_History\n",
    "- Property_Area\n",
    "- Loan_Status\n",
    "\n",
    "**Continuous:**\n",
    "- ApplicantIncome\n",
    "- CoapplicantIncome\n",
    "- LoanAmount"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.092582,
     "end_time": "2020-09-27T23:41:45.501386",
     "exception": false,
     "start_time": "2020-09-27T23:41:45.408804",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Univariate Analysis\n",
    "### Categorical Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:45.691717Z",
     "iopub.status.busy": "2020-09-27T23:41:45.690816Z",
     "iopub.status.idle": "2020-09-27T23:41:45.701328Z",
     "shell.execute_reply": "2020-09-27T23:41:45.701924Z"
    },
    "papermill": {
     "duration": 0.109309,
     "end_time": "2020-09-27T23:41:45.702095",
     "exception": false,
     "start_time": "2020-09-27T23:41:45.592786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender  Married  Education     Self_Employed\n",
       "Female  No       Graduate      No                53\n",
       "                               Yes                8\n",
       "                 Not Graduate  No                10\n",
       "                               Yes                3\n",
       "        Yes      Graduate      No                21\n",
       "                               Yes                3\n",
       "                 Not Graduate  No                 4\n",
       "                               Yes                1\n",
       "Male    No       Graduate      No                81\n",
       "                               Yes               12\n",
       "                 Not Graduate  No                25\n",
       "                               Yes                4\n",
       "        Yes      Graduate      No               223\n",
       "                               Yes               38\n",
       "                 Not Graduate  No                71\n",
       "                               Yes                9\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_tbl1 = df.groupby(['Gender','Married','Education','Self_Employed'])\n",
    "freq_tbl1.size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:45.891233Z",
     "iopub.status.busy": "2020-09-27T23:41:45.890468Z",
     "iopub.status.idle": "2020-09-27T23:41:45.901747Z",
     "shell.execute_reply": "2020-09-27T23:41:45.901129Z"
    },
    "papermill": {
     "duration": 0.108725,
     "end_time": "2020-09-27T23:41:45.901879",
     "exception": false,
     "start_time": "2020-09-27T23:41:45.793154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Credit_History  Property_Area  Loan_Amount_Term\n",
       "0.0             Rural          180.0                 4\n",
       "                               300.0                 1\n",
       "                               360.0                21\n",
       "                Semiurban      180.0                 1\n",
       "                               300.0                 2\n",
       "                               360.0                25\n",
       "                               480.0                 1\n",
       "                Urban          180.0                 5\n",
       "                               360.0                20\n",
       "                               480.0                 3\n",
       "1.0             Rural          84.0                  1\n",
       "                               180.0                 7\n",
       "                               300.0                 2\n",
       "                               360.0               123\n",
       "                               480.0                 2\n",
       "                Semiurban      36.0                  2\n",
       "                               84.0                  1\n",
       "                               120.0                 2\n",
       "                               180.0                 9\n",
       "                               240.0                 2\n",
       "                               300.0                 4\n",
       "                               360.0               159\n",
       "                               480.0                 6\n",
       "                Urban          60.0                  2\n",
       "                               84.0                  1\n",
       "                               120.0                 1\n",
       "                               180.0                17\n",
       "                               240.0                 1\n",
       "                               300.0                 1\n",
       "                               360.0               122\n",
       "                               480.0                 2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_tbl2 = df.groupby(['Credit_History','Property_Area','Loan_Amount_Term'])\n",
    "freq_tbl2.size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:46.094875Z",
     "iopub.status.busy": "2020-09-27T23:41:46.094007Z",
     "iopub.status.idle": "2020-09-27T23:41:46.099008Z",
     "shell.execute_reply": "2020-09-27T23:41:46.098255Z"
    },
    "papermill": {
     "duration": 0.105118,
     "end_time": "2020-09-27T23:41:46.099131",
     "exception": false,
     "start_time": "2020-09-27T23:41:45.994013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Y    422\n",
       "N    192\n",
       "Name: Loan_Status, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Loan_Status.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.091827,
     "end_time": "2020-09-27T23:41:46.286329",
     "exception": false,
     "start_time": "2020-09-27T23:41:46.194502",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "There are more loans approved than rejected."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.094116,
     "end_time": "2020-09-27T23:41:46.472795",
     "exception": false,
     "start_time": "2020-09-27T23:41:46.378679",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Continuous Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:46.673055Z",
     "iopub.status.busy": "2020-09-27T23:41:46.672229Z",
     "iopub.status.idle": "2020-09-27T23:41:46.691623Z",
     "shell.execute_reply": "2020-09-27T23:41:46.690883Z"
    },
    "papermill": {
     "duration": 0.125835,
     "end_time": "2020-09-27T23:41:46.691758",
     "exception": false,
     "start_time": "2020-09-27T23:41:46.565923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>614.000000</td>\n",
       "      <td>614.000000</td>\n",
       "      <td>592.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5403.459283</td>\n",
       "      <td>1621.245798</td>\n",
       "      <td>146.412162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6109.041673</td>\n",
       "      <td>2926.248369</td>\n",
       "      <td>85.587325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2877.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3812.500000</td>\n",
       "      <td>1188.500000</td>\n",
       "      <td>128.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5795.000000</td>\n",
       "      <td>2297.250000</td>\n",
       "      <td>168.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>81000.000000</td>\n",
       "      <td>41667.000000</td>\n",
       "      <td>700.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ApplicantIncome  CoapplicantIncome  LoanAmount\n",
       "count       614.000000         614.000000  592.000000\n",
       "mean       5403.459283        1621.245798  146.412162\n",
       "std        6109.041673        2926.248369   85.587325\n",
       "min         150.000000           0.000000    9.000000\n",
       "25%        2877.500000           0.000000  100.000000\n",
       "50%        3812.500000        1188.500000  128.000000\n",
       "75%        5795.000000        2297.250000  168.000000\n",
       "max       81000.000000       41667.000000  700.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['ApplicantIncome','CoapplicantIncome','LoanAmount']].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.0932,
     "end_time": "2020-09-27T23:41:46.878220",
     "exception": false,
     "start_time": "2020-09-27T23:41:46.785020",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Observations:**\n",
    "1. there are missing values on the latter characteristic\n",
    "2. there is notably a large difference between the 75th percentile and max values of all three variables\n",
    "\n",
    "Thus two observations suggest that there are missing values and outliers in our data set, treatments should be applied in order to avoid building a biased predictive model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:47.072777Z",
     "iopub.status.busy": "2020-09-27T23:41:47.071941Z",
     "iopub.status.idle": "2020-09-27T23:41:47.293656Z",
     "shell.execute_reply": "2020-09-27T23:41:47.292896Z"
    },
    "papermill": {
     "duration": 0.32167,
     "end_time": "2020-09-27T23:41:47.293790",
     "exception": false,
     "start_time": "2020-09-27T23:41:46.972120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# indeed we found there are quite a few outliers\n",
    "sns.boxplot(df['ApplicantIncome'])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:47.506775Z",
     "iopub.status.busy": "2020-09-27T23:41:47.502472Z",
     "iopub.status.idle": "2020-09-27T23:41:47.511072Z",
     "shell.execute_reply": "2020-09-27T23:41:47.511729Z"
    },
    "papermill": {
     "duration": 0.119621,
     "end_time": "2020-09-27T23:41:47.511948",
     "exception": false,
     "start_time": "2020-09-27T23:41:47.392327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10171.25, 11630.0)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IQR_app = df.ApplicantIncome.quantile(0.75) - df.ApplicantIncome.quantile(0.25)\n",
    "upper_limit_app = df.ApplicantIncome.quantile(0.75) + (IQR_app*1.5)\n",
    "upper_limit_extreme_app = df.ApplicantIncome.quantile(0.75) + (IQR_app*2)\n",
    "upper_limit_app, upper_limit_extreme_app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:47.708871Z",
     "iopub.status.busy": "2020-09-27T23:41:47.708014Z",
     "iopub.status.idle": "2020-09-27T23:41:47.740959Z",
     "shell.execute_reply": "2020-09-27T23:41:47.741670Z"
    },
    "papermill": {
     "duration": 0.134315,
     "end_time": "2020-09-27T23:41:47.741902",
     "exception": false,
     "start_time": "2020-09-27T23:41:47.607587",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outlier_count_app = len(df[(df['ApplicantIncome'] > upper_limit_app)])\n",
    "outlier_count_app"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:47.998610Z",
     "iopub.status.busy": "2020-09-27T23:41:47.991594Z",
     "iopub.status.idle": "2020-09-27T23:41:48.237485Z",
     "shell.execute_reply": "2020-09-27T23:41:48.236796Z"
    },
    "papermill": {
     "duration": 0.350485,
     "end_time": "2020-09-27T23:41:48.237616",
     "exception": false,
     "start_time": "2020-09-27T23:41:47.887131",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# the ApplicantIncome distribution is right skewed \n",
    "fig=plt.figure()\n",
    "ax=fig.add_subplot(1,1,1)\n",
    "ax.hist(df['ApplicantIncome'], bins=30)\n",
    "plt.title('ApplicantIncome Distribution')\n",
    "plt.xlabel('Applicant Income')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:48.449053Z",
     "iopub.status.busy": "2020-09-27T23:41:48.444185Z",
     "iopub.status.idle": "2020-09-27T23:41:48.556375Z",
     "shell.execute_reply": "2020-09-27T23:41:48.555699Z"
    },
    "papermill": {
     "duration": 0.221397,
     "end_time": "2020-09-27T23:41:48.556533",
     "exception": false,
     "start_time": "2020-09-27T23:41:48.335136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['CoapplicantIncome'])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:48.772768Z",
     "iopub.status.busy": "2020-09-27T23:41:48.771163Z",
     "iopub.status.idle": "2020-09-27T23:41:48.777397Z",
     "shell.execute_reply": "2020-09-27T23:41:48.776780Z"
    },
    "papermill": {
     "duration": 0.118489,
     "end_time": "2020-09-27T23:41:48.777558",
     "exception": false,
     "start_time": "2020-09-27T23:41:48.659069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5743.125, 6891.75)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IQR_coapp = df.CoapplicantIncome.quantile(0.75) - df.CoapplicantIncome.quantile(0.25)\n",
    "upper_limit_coapp = df.CoapplicantIncome.quantile(0.75) + (IQR_coapp*1.5)\n",
    "upper_limit_extreme_coapp = df.CoapplicantIncome.quantile(0.75) + (IQR_coapp*2)\n",
    "upper_limit_coapp, upper_limit_extreme_coapp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:48.983112Z",
     "iopub.status.busy": "2020-09-27T23:41:48.982070Z",
     "iopub.status.idle": "2020-09-27T23:41:48.986979Z",
     "shell.execute_reply": "2020-09-27T23:41:48.986351Z"
    },
    "papermill": {
     "duration": 0.111136,
     "end_time": "2020-09-27T23:41:48.987108",
     "exception": false,
     "start_time": "2020-09-27T23:41:48.875972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outlier_count_coapp = len(df[(df['CoapplicantIncome'] > upper_limit_coapp)])\n",
    "outlier_count_coapp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:49.202774Z",
     "iopub.status.busy": "2020-09-27T23:41:49.200080Z",
     "iopub.status.idle": "2020-09-27T23:41:49.321903Z",
     "shell.execute_reply": "2020-09-27T23:41:49.321103Z"
    },
    "papermill": {
     "duration": 0.233251,
     "end_time": "2020-09-27T23:41:49.322046",
     "exception": false,
     "start_time": "2020-09-27T23:41:49.088795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['LoanAmount'])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:49.531927Z",
     "iopub.status.busy": "2020-09-27T23:41:49.531013Z",
     "iopub.status.idle": "2020-09-27T23:41:49.541289Z",
     "shell.execute_reply": "2020-09-27T23:41:49.540677Z"
    },
    "papermill": {
     "duration": 0.118309,
     "end_time": "2020-09-27T23:41:49.541422",
     "exception": false,
     "start_time": "2020-09-27T23:41:49.423113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(270.0, 304.0)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IQR_loanAmt = df.LoanAmount.quantile(0.75) - df.LoanAmount.quantile(0.25)\n",
    "upper_limit_loanAmt = df.LoanAmount.quantile(0.75) + (IQR_loanAmt*1.5)\n",
    "upper_limit_extreme_loanAmt = df.LoanAmount.quantile(0.75) + (IQR_loanAmt*2)\n",
    "upper_limit_loanAmt, upper_limit_extreme_loanAmt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:49.752880Z",
     "iopub.status.busy": "2020-09-27T23:41:49.751934Z",
     "iopub.status.idle": "2020-09-27T23:41:49.756607Z",
     "shell.execute_reply": "2020-09-27T23:41:49.755974Z"
    },
    "papermill": {
     "duration": 0.112817,
     "end_time": "2020-09-27T23:41:49.756746",
     "exception": false,
     "start_time": "2020-09-27T23:41:49.643929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outlier_count_loanAmt = len(df[(df['LoanAmount'] > upper_limit_loanAmt)])\n",
    "outlier_count_loanAmt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:49.971207Z",
     "iopub.status.busy": "2020-09-27T23:41:49.964993Z",
     "iopub.status.idle": "2020-09-27T23:41:50.420542Z",
     "shell.execute_reply": "2020-09-27T23:41:50.419755Z"
    },
    "papermill": {
     "duration": 0.563042,
     "end_time": "2020-09-27T23:41:50.420680",
     "exception": false,
     "start_time": "2020-09-27T23:41:49.857638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/opt/conda/lib/python3.7/site-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# the LoanAmount distribution is right skewed \n",
    "fig=plt.figure()\n",
    "ax=fig.add_subplot(1,1,1)\n",
    "ax.hist(df['LoanAmount'], bins=100)\n",
    "plt.title('Loan Amount Distribution')\n",
    "plt.xlabel('Loan Amount')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.104216,
     "end_time": "2020-09-27T23:41:50.628624",
     "exception": false,
     "start_time": "2020-09-27T23:41:50.524408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Section Summary\n",
    "\n",
    "**Variables with missing values:**\n",
    "- Gender (13 or 2.1%)\n",
    "- Married (3 or 0.5%)\n",
    "- Dependents (15 or 2.4%)\n",
    "- Self_Employed (32 or 5.2%)\n",
    "- LoanAmount (22 or 3.6%)\n",
    "- Loan_Amount_Term (14 or 2.3%)\n",
    "- Credit_History (50 or 8.1%)\n",
    "\n",
    "**Variables with outliers:**\n",
    "- ApplicantIncome (43 outliers exceeding its maximum value)\n",
    "- CoapplicantIncome ( 17 outliers exceeding its maximum value)\n",
    "- LoanAmount (30 outliers exceeding its maximum value)\n",
    "\n",
    "*where \"Maximum\" refers to 75th Percentile + 1.5$*$(Interqartile Range)*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.102023,
     "end_time": "2020-09-27T23:41:50.833358",
     "exception": false,
     "start_time": "2020-09-27T23:41:50.731335",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Bivariate Analysis\n",
    "### Categorical and Categorical\n",
    "#### Loan_Status and Gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:51.060556Z",
     "iopub.status.busy": "2020-09-27T23:41:51.047551Z",
     "iopub.status.idle": "2020-09-27T23:41:51.074685Z",
     "shell.execute_reply": "2020-09-27T23:41:51.074045Z"
    },
    "papermill": {
     "duration": 0.138188,
     "end_time": "2020-09-27T23:41:51.074826",
     "exception": false,
     "start_time": "2020-09-27T23:41:50.936638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Gender</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Not Approved</th>\n",
       "      <td>37</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Approved</th>\n",
       "      <td>75</td>\n",
       "      <td>339</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Gender        Female  Male\n",
       "Not Approved      37   150\n",
       "Approved          75   339"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl = pd.crosstab(index = df['Loan_Status'], columns = df['Gender'])\n",
    "tbl.index = ['Not Approved','Approved']\n",
    "tbl"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.103784,
     "end_time": "2020-09-27T23:41:51.282888",
     "exception": false,
     "start_time": "2020-09-27T23:41:51.179104",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Pearson's Chi-square Test**\n",
    "\n",
    "The chi-square test statistic for a test of independence of two categorical variables is as follows:\n",
    "$$\n",
    "\\begin{aligned}\n",
    "\\chi^2 = \\sum{(O - E)^2 / E} \\;, \\;Where\\:O \\:is \\:the \\:observed \\:frequency \\:and \\\\\\:E \\:is \\:the \\:expected \\:frequency\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "$\n",
    "\\\\\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:Loan\\:Status \\:and \\:Gender\n",
    "\\\\H_1: \\:There \\:is \\:a \\:significant \\:relation \\:between \\:the \\:two\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.106403,
     "end_time": "2020-09-27T23:41:51.511618",
     "exception": false,
     "start_time": "2020-09-27T23:41:51.405215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Calculated chi-square value (orginal frequency table excluding missing values)**\n",
    "\n",
    "The calculated $\\chi^2$ value is 0.2369751, where the degree of freedom is 1.\n",
    "The critical value of the $\\chi^2$ distribution with df of 1 is 3.841. \n",
    "\n",
    "Hence:\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "critical\\:value\\:of\\:\\chi^2\\: >=\\:calculated\\:value\\:of\\:\\chi^2\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "\n",
    "Therefore $H_0$ is Accepted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:51.734041Z",
     "iopub.status.busy": "2020-09-27T23:41:51.732893Z",
     "iopub.status.idle": "2020-09-27T23:41:51.738360Z",
     "shell.execute_reply": "2020-09-27T23:41:51.737725Z"
    },
    "papermill": {
     "duration": 0.12097,
     "end_time": "2020-09-27T23:41:51.738516",
     "exception": false,
     "start_time": "2020-09-27T23:41:51.617546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.7086529816451106\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "# performing the test using Python\n",
    "# frequency table without missing values\n",
    "stat, p, dof, expected = chi2_contingency(tbl)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:51.957583Z",
     "iopub.status.busy": "2020-09-27T23:41:51.956621Z",
     "iopub.status.idle": "2020-09-27T23:41:51.961670Z",
     "shell.execute_reply": "2020-09-27T23:41:51.961074Z"
    },
    "papermill": {
     "duration": 0.119167,
     "end_time": "2020-09-27T23:41:51.961806",
     "exception": false,
     "start_time": "2020-09-27T23:41:51.842639",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Loan_Status\n",
       "N    5\n",
       "Y    8\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# How would the table look like if we include counts of missing-value obersvations?\n",
    "tbl2 = tbl\n",
    "df_new = df[df['Gender'].isnull()]\n",
    "tbl_tp = df_new.groupby('Loan_Status')\n",
    "tbl_tp.size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:52.185470Z",
     "iopub.status.busy": "2020-09-27T23:41:52.184284Z",
     "iopub.status.idle": "2020-09-27T23:41:52.188978Z",
     "shell.execute_reply": "2020-09-27T23:41:52.188336Z"
    },
    "papermill": {
     "duration": 0.120509,
     "end_time": "2020-09-27T23:41:52.189104",
     "exception": false,
     "start_time": "2020-09-27T23:41:52.068595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Gender</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "      <th>NaN_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Not Approved</th>\n",
       "      <td>37</td>\n",
       "      <td>150</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Approved</th>\n",
       "      <td>75</td>\n",
       "      <td>339</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Gender        Female  Male  NaN_val\n",
       "Not Approved      37   150        5\n",
       "Approved          75   339        8"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl2['NaN_val'] = [5,8]\n",
    "tbl2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:52.408499Z",
     "iopub.status.busy": "2020-09-27T23:41:52.407663Z",
     "iopub.status.idle": "2020-09-27T23:41:52.604829Z",
     "shell.execute_reply": "2020-09-27T23:41:52.604156Z"
    },
    "papermill": {
     "duration": 0.310578,
     "end_time": "2020-09-27T23:41:52.604957",
     "exception": false,
     "start_time": "2020-09-27T23:41:52.294379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa027c46750>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tbl2.plot.bar(xlabel = 'Loan Status', rot = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.105932,
     "end_time": "2020-09-27T23:41:52.818031",
     "exception": false,
     "start_time": "2020-09-27T23:41:52.712099",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The above bar plot does not provide much evidence to show that there is a significant relationship between *Loan_Status* and *Gender*. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.1078,
     "end_time": "2020-09-27T23:41:53.031851",
     "exception": false,
     "start_time": "2020-09-27T23:41:52.924051",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Calculated chi-square value (modified frequency table including counts of missing values)**\n",
    "\n",
    "The calculated $\\chi^2$ value is 5.66887, where the degree of freedom is 2.\n",
    "The critical value of the $\\chi^2$ distribution with df of 2 is 5.991. \n",
    "\n",
    "Hence:\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "critical\\:value\\:of\\:\\chi^2\\: >=\\:calculated\\:value\\:of\\:\\chi^2\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "\n",
    "Therefore $H_0$ is Accepted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:53.260733Z",
     "iopub.status.busy": "2020-09-27T23:41:53.259738Z",
     "iopub.status.idle": "2020-09-27T23:41:53.263470Z",
     "shell.execute_reply": "2020-09-27T23:41:53.264302Z"
    },
    "papermill": {
     "duration": 0.126301,
     "end_time": "2020-09-27T23:41:53.264536",
     "exception": false,
     "start_time": "2020-09-27T23:41:53.138235",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.7573361980618397\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "# performing the test using Python\n",
    "# frequency table with missing values\n",
    "stat, p, dof, expected = chi2_contingency(tbl2)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.108976,
     "end_time": "2020-09-27T23:41:53.482683",
     "exception": false,
     "start_time": "2020-09-27T23:41:53.373707",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Both $\\chi^2$ tests reject the $H_0$, sugguesting that there is no significant relationship between *Loan_Status* and *Gender*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.108131,
     "end_time": "2020-09-27T23:41:53.699668",
     "exception": false,
     "start_time": "2020-09-27T23:41:53.591537",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Loan_Status and Married"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:53.937997Z",
     "iopub.status.busy": "2020-09-27T23:41:53.928698Z",
     "iopub.status.idle": "2020-09-27T23:41:53.942794Z",
     "shell.execute_reply": "2020-09-27T23:41:53.942166Z"
    },
    "papermill": {
     "duration": 0.136251,
     "end_time": "2020-09-27T23:41:53.942928",
     "exception": false,
     "start_time": "2020-09-27T23:41:53.806677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Not Married</th>\n",
       "      <th>Married</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Not Approved</th>\n",
       "      <td>79</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Approved</th>\n",
       "      <td>134</td>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Not Married  Married\n",
       "Not Approved           79      113\n",
       "Approved              134      285"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_marrd = pd.crosstab(index = df['Loan_Status'], columns = df['Married'])\n",
    "tbl_marrd.index = ['Not Approved','Approved']\n",
    "tbl_marrd.columns = ['Not Married','Married']\n",
    "tbl_marrd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.108044,
     "end_time": "2020-09-27T23:41:54.161795",
     "exception": false,
     "start_time": "2020-09-27T23:41:54.053751",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:variables\\:Loan\\:Status\\:and\\:Married\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:54.393813Z",
     "iopub.status.busy": "2020-09-27T23:41:54.392754Z",
     "iopub.status.idle": "2020-09-27T23:41:54.398248Z",
     "shell.execute_reply": "2020-09-27T23:41:54.396755Z"
    },
    "papermill": {
     "duration": 0.124589,
     "end_time": "2020-09-27T23:41:54.398477",
     "exception": false,
     "start_time": "2020-09-27T23:41:54.273888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.03439381301579988\n",
      "Dependent (reject H_0)\n"
     ]
    }
   ],
   "source": [
    "stat, p, dof, exptected = chi2_contingency(tbl_marrd)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.11585,
     "end_time": "2020-09-27T23:41:54.629988",
     "exception": false,
     "start_time": "2020-09-27T23:41:54.514138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Loan_Status and Education"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:54.861385Z",
     "iopub.status.busy": "2020-09-27T23:41:54.856600Z",
     "iopub.status.idle": "2020-09-27T23:41:54.875569Z",
     "shell.execute_reply": "2020-09-27T23:41:54.874766Z"
    },
    "papermill": {
     "duration": 0.136565,
     "end_time": "2020-09-27T23:41:54.875698",
     "exception": false,
     "start_time": "2020-09-27T23:41:54.739133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Education</th>\n",
       "      <th>Graduate</th>\n",
       "      <th>Not Graduate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Not Approved</th>\n",
       "      <td>140</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Approved</th>\n",
       "      <td>340</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Education     Graduate  Not Graduate\n",
       "Not Approved       140            52\n",
       "Approved           340            82"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_ed = pd.crosstab(df['Loan_Status'],df['Education'])\n",
    "tbl_ed.index = ['Not Approved','Approved']\n",
    "tbl_ed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:55.110621Z",
     "iopub.status.busy": "2020-09-27T23:41:55.109282Z",
     "iopub.status.idle": "2020-09-27T23:41:55.273093Z",
     "shell.execute_reply": "2020-09-27T23:41:55.272475Z"
    },
    "papermill": {
     "duration": 0.287972,
     "end_time": "2020-09-27T23:41:55.273223",
     "exception": false,
     "start_time": "2020-09-27T23:41:54.985251",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa027a0b810>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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H344p556Km+++WZF+cCBAym/eWvNmjUUFBQAmRA/4YQT6Nu3L3379q34Mo8xY8YwZ84cCgsLmTBhAtu2bePmm2+mX79+9O7dm1//+te74VUxs+ag2QzLNIZly5bRt2/fKtfPmzePxYsX065dO7Zu3crMmTPZb7/9WLNmDcceeyznnHMOCxcuZNq0abz22mts3bqVvn37cvTRR1d73IMOOohnn32WvLw83n77bYYPH05xcTF33HEH48eP5+mnnwZg0qRJ7L///syfP5/Nmzdz/PHHc9ppp9U446SZpZ/DfSeMGjWKuXPnsueeezJq1Ci+8pWvVEzpGxF873vf48UXX2SPPfbgww8/ZPXq1cyZM4fBgwez9957A3DOOefUeJwtW7YwevRoSkpKaNGiBW+99VbOen/5y19YvHgxM2bMADKTk7399tsOdzNzuFenR48ePPbYYxWPf/nLX7JmzRqKijJTOeyzzz4V66ZOnUpZWRkLFiygVatWFBQUVEzrW5tpg7OnAJ4wYQIHH3wwixYt4rPPPiMvLy/n9hHBz3/+c04//fS6PVEzSx2PuVfjlFNOYdOmTUycOLGi7H//939z1l23bh0HHXQQrVq14oUXXuC9994D4MQTT2TmzJls3LiR9evX89RTT1VsU1BQwIIFCwAqet/l++rQoQN77LEHDz30ENu2bQN2nB749NNPZ+LEiWzZsgWAt956i3/961/19OzNrDmrsecuKQ94EWid1J8RET+U1A54BCgAVgIXRsSnyTa3AFcC24BrI+LPdW1oY8wmJ4lZs2Zxww03cOedd5Kfn88+++zDT37yEzZu3Lhd3UsuuYSzzz6boqIiCgsL6d69OwB9+/bloosuorCwkM6dO2/3VXo33XQTF154IQ899BCnnHJKRfm3vvUthgwZwqOPPsrJJ59c8RdC7969admyJX369OHyyy/nuuuuY+XKlfTt25eIID8/n1mzZu2GV8bMmroap/xVZkxhn4jYIKkVMBe4Djgf+CQi7pA0BjggIr4r6UjgYaA/cAjwV6BbRGyr6hie8rf58b9P0+Mpf7946jTlb2RsSB62Sn4COBco/0qhKcB5yfK5wLSI2BwRK4B3yAS9mZntJrUac5fUQlIJ8DHwbES8AhwcEasAkt8HJdUPBT7I2rw0Kau8z5GSiiUVl5WV1eU5mJlZJbUK94jYFhGF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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tbl_ed.plot.bar(xlabel = 'Loan Status', rot = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.110132,
     "end_time": "2020-09-27T23:41:55.493236",
     "exception": false,
     "start_time": "2020-09-27T23:41:55.383104",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:Loan\\:Status\\:and\\:Education\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:55.722085Z",
     "iopub.status.busy": "2020-09-27T23:41:55.721135Z",
     "iopub.status.idle": "2020-09-27T23:41:55.724760Z",
     "shell.execute_reply": "2020-09-27T23:41:55.725608Z"
    },
    "papermill": {
     "duration": 0.121948,
     "end_time": "2020-09-27T23:41:55.725781",
     "exception": false,
     "start_time": "2020-09-27T23:41:55.603833",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.04309962129357355\n",
      "Dependent (reject H_0)\n"
     ]
    }
   ],
   "source": [
    "stat, p, dof, exptected = chi2_contingency(tbl_ed)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.110638,
     "end_time": "2020-09-27T23:41:55.948511",
     "exception": false,
     "start_time": "2020-09-27T23:41:55.837873",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The above probability indicates that the relationship between *Loan_Status* and *Education* is significant at 95% confidence."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.112741,
     "end_time": "2020-09-27T23:41:56.174101",
     "exception": false,
     "start_time": "2020-09-27T23:41:56.061360",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Loan_Status and Self_Employed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:56.413679Z",
     "iopub.status.busy": "2020-09-27T23:41:56.406841Z",
     "iopub.status.idle": "2020-09-27T23:41:56.426908Z",
     "shell.execute_reply": "2020-09-27T23:41:56.427524Z"
    },
    "papermill": {
     "duration": 0.139922,
     "end_time": "2020-09-27T23:41:56.427693",
     "exception": false,
     "start_time": "2020-09-27T23:41:56.287771",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Self_Employed</th>\n",
       "      <th>No</th>\n",
       "      <th>Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Not Approved</th>\n",
       "      <td>157</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Approved</th>\n",
       "      <td>343</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Self_Employed   No  Yes\n",
       "Not Approved   157   26\n",
       "Approved       343   56"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_emp = pd.crosstab(index = df['Loan_Status'], columns = df['Self_Employed'])\n",
    "tbl_emp.index = ['Not Approved','Approved']\n",
    "tbl_emp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:56.665140Z",
     "iopub.status.busy": "2020-09-27T23:41:56.659944Z",
     "iopub.status.idle": "2020-09-27T23:41:56.822525Z",
     "shell.execute_reply": "2020-09-27T23:41:56.821921Z"
    },
    "papermill": {
     "duration": 0.283478,
     "end_time": "2020-09-27T23:41:56.822655",
     "exception": false,
     "start_time": "2020-09-27T23:41:56.539177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa027bc6250>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tbl_emp.plot.bar(xlabel = 'Loan Status',rot = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.120854,
     "end_time": "2020-09-27T23:41:57.056099",
     "exception": false,
     "start_time": "2020-09-27T23:41:56.935245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:Loan\\:Status\\:and\\:Self\\_Employed\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:57.309462Z",
     "iopub.status.busy": "2020-09-27T23:41:57.308256Z",
     "iopub.status.idle": "2020-09-27T23:41:57.314168Z",
     "shell.execute_reply": "2020-09-27T23:41:57.313294Z"
    },
    "papermill": {
     "duration": 0.144586,
     "end_time": "2020-09-27T23:41:57.314355",
     "exception": false,
     "start_time": "2020-09-27T23:41:57.169769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.9420039242223718\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "stat, p, dof, expected = chi2_contingency(tbl_emp)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.117002,
     "end_time": "2020-09-27T23:41:57.546704",
     "exception": false,
     "start_time": "2020-09-27T23:41:57.429702",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Chi-square test sugguests that there is no significant relationship between *Loan_Status* and *Self_Employed*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.112954,
     "end_time": "2020-09-27T23:41:57.774478",
     "exception": false,
     "start_time": "2020-09-27T23:41:57.661524",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Loan_Status and Loan_Amount_Term"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:58.023339Z",
     "iopub.status.busy": "2020-09-27T23:41:58.013536Z",
     "iopub.status.idle": "2020-09-27T23:41:58.049775Z",
     "shell.execute_reply": "2020-09-27T23:41:58.048625Z"
    },
    "papermill": {
     "duration": 0.160856,
     "end_time": "2020-09-27T23:41:58.049975",
     "exception": false,
     "start_time": "2020-09-27T23:41:57.889119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <th>12.0</th>\n",
       "      <th>36.0</th>\n",
       "      <th>60.0</th>\n",
       "      <th>84.0</th>\n",
       "      <th>120.0</th>\n",
       "      <th>180.0</th>\n",
       "      <th>240.0</th>\n",
       "      <th>300.0</th>\n",
       "      <th>360.0</th>\n",
       "      <th>480.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Not Approved</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>153</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Approved</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>29</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>359</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Loan_Amount_Term  12.0   36.0   60.0   84.0   120.0  180.0  240.0  300.0  \\\n",
       "Not Approved          0      2      0      1      0     15      1      5   \n",
       "Approved              1      0      2      3      3     29      3      8   \n",
       "\n",
       "Loan_Amount_Term  360.0  480.0  \n",
       "Not Approved        153      9  \n",
       "Approved            359      6  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_term = pd.crosstab(index = df['Loan_Status'], columns = df['Loan_Amount_Term'])\n",
    "tbl_term.index = ['Not Approved','Approved']\n",
    "tbl_term"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:58.311945Z",
     "iopub.status.busy": "2020-09-27T23:41:58.310777Z",
     "iopub.status.idle": "2020-09-27T23:41:58.317488Z",
     "shell.execute_reply": "2020-09-27T23:41:58.316671Z"
    },
    "papermill": {
     "duration": 0.150171,
     "end_time": "2020-09-27T23:41:58.317782",
     "exception": false,
     "start_time": "2020-09-27T23:41:58.167611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.12185762421276597\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "stat, p, dof, exptected = chi2_contingency(tbl_term)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.120841,
     "end_time": "2020-09-27T23:41:58.560414",
     "exception": false,
     "start_time": "2020-09-27T23:41:58.439573",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Loan_Status and Credit_History"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:58.812928Z",
     "iopub.status.busy": "2020-09-27T23:41:58.802202Z",
     "iopub.status.idle": "2020-09-27T23:41:58.822739Z",
     "shell.execute_reply": "2020-09-27T23:41:58.822127Z"
    },
    "papermill": {
     "duration": 0.14483,
     "end_time": "2020-09-27T23:41:58.822870",
     "exception": false,
     "start_time": "2020-09-27T23:41:58.678040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Guidelines Not Met</th>\n",
       "      <th>Guidelines Met</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Not Approved</th>\n",
       "      <td>82</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Approved</th>\n",
       "      <td>7</td>\n",
       "      <td>378</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Guidelines Not Met  Guidelines Met\n",
       "Not Approved                  82              97\n",
       "Approved                       7             378"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_crt = pd.crosstab(index = df['Loan_Status'], columns = df['Credit_History'])\n",
    "tbl_crt.index = ['Not Approved','Approved']\n",
    "tbl_crt.columns = ['Guidelines Not Met', 'Guidelines Met'] \n",
    "tbl_crt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.117719,
     "end_time": "2020-09-27T23:41:59.056912",
     "exception": false,
     "start_time": "2020-09-27T23:41:58.939193",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- *Credit_History* has 50 missing values\n",
    "- It seems to suggest that there are relatively more loans approved when the applicants' credit meets the guidelines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:59.320532Z",
     "iopub.status.busy": "2020-09-27T23:41:59.319495Z",
     "iopub.status.idle": "2020-09-27T23:41:59.478658Z",
     "shell.execute_reply": "2020-09-27T23:41:59.478023Z"
    },
    "papermill": {
     "duration": 0.301623,
     "end_time": "2020-09-27T23:41:59.478779",
     "exception": false,
     "start_time": "2020-09-27T23:41:59.177156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa0279d6250>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tbl_crt.plot.bar(xlabel = 'Loan_Status', rot = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.116663,
     "end_time": "2020-09-27T23:41:59.713471",
     "exception": false,
     "start_time": "2020-09-27T23:41:59.596808",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:Loan\\:Status\\:and\\:Credit\\_History\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:41:59.957271Z",
     "iopub.status.busy": "2020-09-27T23:41:59.956320Z",
     "iopub.status.idle": "2020-09-27T23:41:59.959861Z",
     "shell.execute_reply": "2020-09-27T23:41:59.960458Z"
    },
    "papermill": {
     "duration": 0.130378,
     "end_time": "2020-09-27T23:41:59.960623",
     "exception": false,
     "start_time": "2020-09-27T23:41:59.830245",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 7.184759548750746e-40\n",
      "Dependent (reject H_0)\n"
     ]
    }
   ],
   "source": [
    "stat, p, dof, expected = chi2_contingency(tbl_crt)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.119848,
     "end_time": "2020-09-27T23:42:00.198273",
     "exception": false,
     "start_time": "2020-09-27T23:42:00.078425",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Loan_Status and Property_Area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:00.451902Z",
     "iopub.status.busy": "2020-09-27T23:42:00.450327Z",
     "iopub.status.idle": "2020-09-27T23:42:00.464398Z",
     "shell.execute_reply": "2020-09-27T23:42:00.464969Z"
    },
    "papermill": {
     "duration": 0.148245,
     "end_time": "2020-09-27T23:42:00.465134",
     "exception": false,
     "start_time": "2020-09-27T23:42:00.316889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Property_Area</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Semiurban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Not Approved</th>\n",
       "      <td>69</td>\n",
       "      <td>54</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Approved</th>\n",
       "      <td>110</td>\n",
       "      <td>179</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Property_Area  Rural  Semiurban  Urban\n",
       "Not Approved      69         54     69\n",
       "Approved         110        179    133"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_area = pd.crosstab(index = df['Loan_Status'], columns = df['Property_Area'])\n",
    "tbl_area.index = ['Not Approved','Approved']\n",
    "tbl_area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:00.726941Z",
     "iopub.status.busy": "2020-09-27T23:42:00.725478Z",
     "iopub.status.idle": "2020-09-27T23:42:00.893572Z",
     "shell.execute_reply": "2020-09-27T23:42:00.892930Z"
    },
    "papermill": {
     "duration": 0.307845,
     "end_time": "2020-09-27T23:42:00.893708",
     "exception": false,
     "start_time": "2020-09-27T23:42:00.585863",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa02794d850>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tbl_area.plot.bar(xlabel = 'Loan Status', rot = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.119572,
     "end_time": "2020-09-27T23:42:01.133594",
     "exception": false,
     "start_time": "2020-09-27T23:42:01.014022",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:Loan\\:Status\\:and\\:Property\\_Area\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:01.386017Z",
     "iopub.status.busy": "2020-09-27T23:42:01.385040Z",
     "iopub.status.idle": "2020-09-27T23:42:01.389003Z",
     "shell.execute_reply": "2020-09-27T23:42:01.389744Z"
    },
    "papermill": {
     "duration": 0.132627,
     "end_time": "2020-09-27T23:42:01.389909",
     "exception": false,
     "start_time": "2020-09-27T23:42:01.257282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.0021360187811644915\n",
      "Dependent (reject H_0)\n"
     ]
    }
   ],
   "source": [
    "stat, p, dof, exptected = chi2_contingency(tbl_area)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.121267,
     "end_time": "2020-09-27T23:42:01.631684",
     "exception": false,
     "start_time": "2020-09-27T23:42:01.510417",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Categorical and Continuous\n",
    "#### Loan_Status and ApplicantIncome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:01.897177Z",
     "iopub.status.busy": "2020-09-27T23:42:01.883691Z",
     "iopub.status.idle": "2020-09-27T23:42:01.902507Z",
     "shell.execute_reply": "2020-09-27T23:42:01.901518Z"
    },
    "papermill": {
     "duration": 0.150963,
     "end_time": "2020-09-27T23:42:01.902663",
     "exception": false,
     "start_time": "2020-09-27T23:42:01.751700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Loan_Status</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>N</th>\n",
       "      <td>192.0</td>\n",
       "      <td>5446.078125</td>\n",
       "      <td>6819.558528</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2885.0</td>\n",
       "      <td>3833.5</td>\n",
       "      <td>5861.25</td>\n",
       "      <td>81000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Y</th>\n",
       "      <td>422.0</td>\n",
       "      <td>5384.068720</td>\n",
       "      <td>5765.441615</td>\n",
       "      <td>210.0</td>\n",
       "      <td>2877.5</td>\n",
       "      <td>3812.5</td>\n",
       "      <td>5771.50</td>\n",
       "      <td>63337.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             count         mean          std    min     25%     50%      75%  \\\n",
       "Loan_Status                                                                    \n",
       "N            192.0  5446.078125  6819.558528  150.0  2885.0  3833.5  5861.25   \n",
       "Y            422.0  5384.068720  5765.441615  210.0  2877.5  3812.5  5771.50   \n",
       "\n",
       "                 max  \n",
       "Loan_Status           \n",
       "N            81000.0  \n",
       "Y            63337.0  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ApplicantIncome'].groupby(df['Loan_Status']).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:02.173905Z",
     "iopub.status.busy": "2020-09-27T23:42:02.173021Z",
     "iopub.status.idle": "2020-09-27T23:42:02.177603Z",
     "shell.execute_reply": "2020-09-27T23:42:02.176852Z"
    },
    "papermill": {
     "duration": 0.148169,
     "end_time": "2020-09-27T23:42:02.177730",
     "exception": false,
     "start_time": "2020-09-27T23:42:02.029561",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1       4583\n",
       "7       3036\n",
       "9      12841\n",
       "13      1853\n",
       "17      3510\n",
       "       ...  \n",
       "596     6383\n",
       "597     2987\n",
       "600      416\n",
       "605     2400\n",
       "613     4583\n",
       "Name: ApplicantIncome, Length: 192, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data set of Loan_Status Not Approved\n",
    "tbl_appN = df[(df['Loan_Status'] == 'N')]\n",
    "tbl_appN = tbl_appN['ApplicantIncome']\n",
    "tbl_appN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:02.433307Z",
     "iopub.status.busy": "2020-09-27T23:42:02.432184Z",
     "iopub.status.idle": "2020-09-27T23:42:02.436684Z",
     "shell.execute_reply": "2020-09-27T23:42:02.436073Z"
    },
    "papermill": {
     "duration": 0.136192,
     "end_time": "2020-09-27T23:42:02.436813",
     "exception": false,
     "start_time": "2020-09-27T23:42:02.300621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      5849\n",
       "2      3000\n",
       "3      2583\n",
       "4      6000\n",
       "5      5417\n",
       "       ... \n",
       "608    3232\n",
       "609    2900\n",
       "610    4106\n",
       "611    8072\n",
       "612    7583\n",
       "Name: ApplicantIncome, Length: 422, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data set of Loan_Status Approved\n",
    "tbl_appY = df[(df['Loan_Status'] == 'Y')]\n",
    "tbl_appY = tbl_appY['ApplicantIncome']\n",
    "tbl_appY"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.124016,
     "end_time": "2020-09-27T23:42:02.683383",
     "exception": false,
     "start_time": "2020-09-27T23:42:02.559367",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Two sample Z-Test (ApplicantIncome splitted by Loan_Status)**\n",
    "\n",
    "$$\n",
    "H_0: \\:\\mu_{N_{income}} =\\:\\mu_{Y_{income}}\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$$\n",
    "\n",
    "Assuming two levels of samples are independent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:02.937078Z",
     "iopub.status.busy": "2020-09-27T23:42:02.936244Z",
     "iopub.status.idle": "2020-09-27T23:42:02.940541Z",
     "shell.execute_reply": "2020-09-27T23:42:02.939312Z"
    },
    "papermill": {
     "duration": 0.134897,
     "end_time": "2020-09-27T23:42:02.940682",
     "exception": false,
     "start_time": "2020-09-27T23:42:02.805785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.9072495909325038\n",
      "Two population means are equal (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "ztest, pval = stests.ztest(tbl_appN,tbl_appY,value = 0, alternative = 'two-sided')\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(pval))\n",
    "if pval <= alpha:\n",
    "    print('Two population means are not equal (reject H_0)')\n",
    "else:\n",
    "    print('Two population means are equal (H_0 holds true)')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.127727,
     "end_time": "2020-09-27T23:42:03.194873",
     "exception": false,
     "start_time": "2020-09-27T23:42:03.067146",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Conclusion**\n",
    "\n",
    "There is no evidence that the difference in Applicant income will have an impact on loan eligibility."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:03.455225Z",
     "iopub.status.busy": "2020-09-27T23:42:03.449059Z",
     "iopub.status.idle": "2020-09-27T23:42:03.618377Z",
     "shell.execute_reply": "2020-09-27T23:42:03.617627Z"
    },
    "papermill": {
     "duration": 0.300524,
     "end_time": "2020-09-27T23:42:03.618526",
     "exception": false,
     "start_time": "2020-09-27T23:42:03.318002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize = (6,5))\n",
    "df.boxplot(column = 'ApplicantIncome', by = 'Loan_Status', ax = ax, grid = False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.123546,
     "end_time": "2020-09-27T23:42:03.867140",
     "exception": false,
     "start_time": "2020-09-27T23:42:03.743594",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Loan_Status and LoanAmount"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:04.127645Z",
     "iopub.status.busy": "2020-09-27T23:42:04.124991Z",
     "iopub.status.idle": "2020-09-27T23:42:04.151208Z",
     "shell.execute_reply": "2020-09-27T23:42:04.150603Z"
    },
    "papermill": {
     "duration": 0.158433,
     "end_time": "2020-09-27T23:42:04.151339",
     "exception": false,
     "start_time": "2020-09-27T23:42:03.992906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Loan_Status</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>N</th>\n",
       "      <td>181.0</td>\n",
       "      <td>151.220994</td>\n",
       "      <td>85.862783</td>\n",
       "      <td>9.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>176.0</td>\n",
       "      <td>570.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Y</th>\n",
       "      <td>411.0</td>\n",
       "      <td>144.294404</td>\n",
       "      <td>85.484607</td>\n",
       "      <td>17.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>126.0</td>\n",
       "      <td>161.0</td>\n",
       "      <td>700.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             count        mean        std   min    25%    50%    75%    max\n",
       "Loan_Status                                                                \n",
       "N            181.0  151.220994  85.862783   9.0  100.0  129.0  176.0  570.0\n",
       "Y            411.0  144.294404  85.484607  17.0  100.0  126.0  161.0  700.0"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['LoanAmount'].groupby(df['Loan_Status']).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:04.432690Z",
     "iopub.status.busy": "2020-09-27T23:42:04.431532Z",
     "iopub.status.idle": "2020-09-27T23:42:04.435780Z",
     "shell.execute_reply": "2020-09-27T23:42:04.436368Z"
    },
    "papermill": {
     "duration": 0.146368,
     "end_time": "2020-09-27T23:42:04.436561",
     "exception": false,
     "start_time": "2020-09-27T23:42:04.290193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1      128.0\n",
       "7      158.0\n",
       "9      349.0\n",
       "13     114.0\n",
       "17      76.0\n",
       "       ...  \n",
       "591    205.0\n",
       "596    187.0\n",
       "597     88.0\n",
       "600    350.0\n",
       "613    133.0\n",
       "Name: LoanAmount, Length: 181, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_amtN = df[(df['Loan_Status'] == 'N')]\n",
    "tbl_amtN = tbl_amtN['LoanAmount'].dropna() # we know there are missing values\n",
    "tbl_amtN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:04.701360Z",
     "iopub.status.busy": "2020-09-27T23:42:04.700285Z",
     "iopub.status.idle": "2020-09-27T23:42:04.704425Z",
     "shell.execute_reply": "2020-09-27T23:42:04.705040Z"
    },
    "papermill": {
     "duration": 0.140975,
     "end_time": "2020-09-27T23:42:04.705194",
     "exception": false,
     "start_time": "2020-09-27T23:42:04.564219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2       66.0\n",
       "3      120.0\n",
       "4      141.0\n",
       "5      267.0\n",
       "6       95.0\n",
       "       ...  \n",
       "608    108.0\n",
       "609     71.0\n",
       "610     40.0\n",
       "611    253.0\n",
       "612    187.0\n",
       "Name: LoanAmount, Length: 411, dtype: float64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_amtY = df[(df['Loan_Status'] == 'Y')]\n",
    "tbl_amtY = tbl_amtY['LoanAmount'].dropna() # missing values dropped\n",
    "tbl_amtY "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.125949,
     "end_time": "2020-09-27T23:42:04.956999",
     "exception": false,
     "start_time": "2020-09-27T23:42:04.831050",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Two sample Z-Test (LoanAmount splitted by Loan_Status)**\n",
    "\n",
    "$$\n",
    "H_0: \\:\\mu_{N_{LoanAmt}} =\\:\\mu_{Y_{LoanAmt}}\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$$\n",
    "\n",
    "Assuming two levels of samples are independent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:05.219411Z",
     "iopub.status.busy": "2020-09-27T23:42:05.218305Z",
     "iopub.status.idle": "2020-09-27T23:42:05.222151Z",
     "shell.execute_reply": "2020-09-27T23:42:05.223018Z"
    },
    "papermill": {
     "duration": 0.139821,
     "end_time": "2020-09-27T23:42:05.223223",
     "exception": false,
     "start_time": "2020-09-27T23:42:05.083402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.36436593320314825\n",
      "Two population means are equal (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "ztest, pval = stests.ztest(tbl_amtN,tbl_amtY,value = 0, alternative = 'two-sided')\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(pval))\n",
    "if pval <= alpha:\n",
    "    print('Two population means are not equal (reject H_0)')\n",
    "else:\n",
    "    print('Two population means are equal (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.12877,
     "end_time": "2020-09-27T23:42:05.479386",
     "exception": false,
     "start_time": "2020-09-27T23:42:05.350616",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Conclusion**\n",
    "\n",
    "There is no evidence that the difference in Loan Amount will result in lower/higher loan acceptance rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:05.743135Z",
     "iopub.status.busy": "2020-09-27T23:42:05.742200Z",
     "iopub.status.idle": "2020-09-27T23:42:05.903808Z",
     "shell.execute_reply": "2020-09-27T23:42:05.903194Z"
    },
    "papermill": {
     "duration": 0.296673,
     "end_time": "2020-09-27T23:42:05.903937",
     "exception": false,
     "start_time": "2020-09-27T23:42:05.607264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize = (6,5))\n",
    "df.boxplot(column = 'LoanAmount', by = 'Loan_Status', ax = ax, grid = False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.12787,
     "end_time": "2020-09-27T23:42:06.160933",
     "exception": false,
     "start_time": "2020-09-27T23:42:06.033063",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Continuous and Contintuous\n",
    "#### ApplicantIncome vs. LoanAmount"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:06.430579Z",
     "iopub.status.busy": "2020-09-27T23:42:06.429528Z",
     "iopub.status.idle": "2020-09-27T23:42:06.633573Z",
     "shell.execute_reply": "2020-09-27T23:42:06.632882Z"
    },
    "papermill": {
     "duration": 0.344424,
     "end_time": "2020-09-27T23:42:06.633720",
     "exception": false,
     "start_time": "2020-09-27T23:42:06.289296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(1,1,1)\n",
    "ax.scatter(df['ApplicantIncome'],df['LoanAmount'])\n",
    "plt.title('ApplicantIncome and LoanAmount Distribution')\n",
    "plt.xlabel('Applicant Income')\n",
    "plt.ylabel('Loan Amount')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.128317,
     "end_time": "2020-09-27T23:42:06.893143",
     "exception": false,
     "start_time": "2020-09-27T23:42:06.764826",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "From the above scatter plot, it looks like there is a positive correlation between 'LoanAmount' and 'ApplicantIncome'. Yet here we have not performed any missing data nor outlier treatment, thus it is too early to make a conclusion."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.13465,
     "end_time": "2020-09-27T23:42:07.158968",
     "exception": false,
     "start_time": "2020-09-27T23:42:07.024318",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### CoapplicantIncome vs. LoanAmount"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:07.432821Z",
     "iopub.status.busy": "2020-09-27T23:42:07.430626Z",
     "iopub.status.idle": "2020-09-27T23:42:07.596062Z",
     "shell.execute_reply": "2020-09-27T23:42:07.595281Z"
    },
    "papermill": {
     "duration": 0.307495,
     "end_time": "2020-09-27T23:42:07.596187",
     "exception": false,
     "start_time": "2020-09-27T23:42:07.288692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(1,1,1)\n",
    "ax.scatter(df['CoapplicantIncome'],df['LoanAmount'])\n",
    "plt.title('CoapplicantIncome and LoanAmount Distribution')\n",
    "plt.xlabel('Coapplicant Income')\n",
    "plt.ylabel('Loan Amount')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.129309,
     "end_time": "2020-09-27T23:42:07.856539",
     "exception": false,
     "start_time": "2020-09-27T23:42:07.727230",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "It is hard to make any conclusion from the above scatter plot, but it looks like a portion of the points sugguests the positive correlation. Ideally to double check, we would calculate the correlation coefficient, but due to difference in two variables' shapes, we have to perform missing values treatment in order to proceed with correlation calculation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.131213,
     "end_time": "2020-09-27T23:42:08.118197",
     "exception": false,
     "start_time": "2020-09-27T23:42:07.986984",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Section Summary (where the missing values are simply ignored)\n",
    "\n",
    "Predictor variables that are observed to have a statistacally significant association with the Target varialbe are as follows:\n",
    "- Married\n",
    "- Education\n",
    "- Credit_History\n",
    "- Property_Area"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.130775,
     "end_time": "2020-09-27T23:42:08.383202",
     "exception": false,
     "start_time": "2020-09-27T23:42:08.252427",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Missing value Treatment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.146836,
     "end_time": "2020-09-27T23:42:08.665247",
     "exception": false,
     "start_time": "2020-09-27T23:42:08.518411",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "From previous analysis, we know most of the variables have at least one missing value, below will examine the possible cause of the occurence of the missing values, in my opinion, for each variable.\n",
    "\n",
    "- Gender: Most likely be missing completely at random(MCAR)\n",
    "- Married: MCAR\n",
    "- Dependents: MCAR\n",
    "- Self_Employed: MCAR\n",
    "- LoanAmount: MCAR\n",
    "- Loan_Amount_Term: MCAR\n",
    "- Credit_History: Missing at random. Applicants who do not meeting credit guidelines tend to have higher missing value compare to those whose credit met the guidelines.\n",
    "\n",
    "Statistically speaking, if the number of missing observations is less than 5% of the sample, we can drop them. In addition, if the missing value is determined to be MCAR, we can safely perform deletion of missing value cases. With that said, missing observations of *Gender, Married, Dependents, Self_Employed, LoanAmount and Loan_Amount_Term* can be dropped. \n",
    "\n",
    "As for *Credit_History*, imputation will be conducted to replace the missing ones."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.141711,
     "end_time": "2020-09-27T23:42:08.959973",
     "exception": false,
     "start_time": "2020-09-27T23:42:08.818262",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Credit_History Imputation\n",
    "\n",
    "Before the actual imputation, we should examine if there's any correlation between *Credit_History* and other variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.139859,
     "end_time": "2020-09-27T23:42:09.233974",
     "exception": false,
     "start_time": "2020-09-27T23:42:09.094115",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Credit_history vs Gender\n",
    "\n",
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:variables\\:Credit\\_History\\:and\\:Gender\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:09.540345Z",
     "iopub.status.busy": "2020-09-27T23:42:09.535607Z",
     "iopub.status.idle": "2020-09-27T23:42:09.551988Z",
     "shell.execute_reply": "2020-09-27T23:42:09.552956Z"
    },
    "papermill": {
     "duration": 0.158944,
     "end_time": "2020-09-27T23:42:09.553158",
     "exception": false,
     "start_time": "2020-09-27T23:42:09.394214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.8164953298683041\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "tbl_cGender = pd.crosstab(df['Credit_History'],df['Gender'])\n",
    "stat, p, dof, exptected = chi2_contingency(tbl_cGender)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.131472,
     "end_time": "2020-09-27T23:42:09.815702",
     "exception": false,
     "start_time": "2020-09-27T23:42:09.684230",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Credit_History vs Married\n",
    "\n",
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:variables\\:Credit\\_History\\:and\\:Married\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:10.088315Z",
     "iopub.status.busy": "2020-09-27T23:42:10.087197Z",
     "iopub.status.idle": "2020-09-27T23:42:10.104601Z",
     "shell.execute_reply": "2020-09-27T23:42:10.103583Z"
    },
    "papermill": {
     "duration": 0.158966,
     "end_time": "2020-09-27T23:42:10.104768",
     "exception": false,
     "start_time": "2020-09-27T23:42:09.945802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.9864309067859328\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "tbl_cMarried = pd.crosstab(df['Credit_History'],df['Married'])\n",
    "stat, p, dof, exptected = chi2_contingency(tbl_cMarried)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.130686,
     "end_time": "2020-09-27T23:42:10.368243",
     "exception": false,
     "start_time": "2020-09-27T23:42:10.237557",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Credit_History vs Education\n",
    "\n",
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:variables\\:Credit\\_History\\:and\\:Education\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:10.640991Z",
     "iopub.status.busy": "2020-09-27T23:42:10.640228Z",
     "iopub.status.idle": "2020-09-27T23:42:10.655003Z",
     "shell.execute_reply": "2020-09-27T23:42:10.655580Z"
    },
    "papermill": {
     "duration": 0.155575,
     "end_time": "2020-09-27T23:42:10.655754",
     "exception": false,
     "start_time": "2020-09-27T23:42:10.500179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.0714694601906817\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "tbl_cEd = pd.crosstab(df['Credit_History'],df['Education'])\n",
    "stat, p, dof, exptected = chi2_contingency(tbl_cEd)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.131415,
     "end_time": "2020-09-27T23:42:10.920630",
     "exception": false,
     "start_time": "2020-09-27T23:42:10.789215",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Credit_History vs Self_Employed\n",
    "\n",
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:variables\\:Credit\\_History\\:and\\:Self\\_Employed\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:11.197451Z",
     "iopub.status.busy": "2020-09-27T23:42:11.196609Z",
     "iopub.status.idle": "2020-09-27T23:42:11.213952Z",
     "shell.execute_reply": "2020-09-27T23:42:11.213080Z"
    },
    "papermill": {
     "duration": 0.160456,
     "end_time": "2020-09-27T23:42:11.214125",
     "exception": false,
     "start_time": "2020-09-27T23:42:11.053669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.9376796063240526\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "tbl_cEmp = pd.crosstab(df['Credit_History'],df['Self_Employed'])\n",
    "stat, p, dof, exptected = chi2_contingency(tbl_cEmp)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.132664,
     "end_time": "2020-09-27T23:42:11.479034",
     "exception": false,
     "start_time": "2020-09-27T23:42:11.346370",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Credit_History vs Property_Area\n",
    "\n",
    "**Chi-square Test**\n",
    "\n",
    "$\n",
    "H_0: \\:There \\:is \\:no \\:relationship \\:between \\:variables\\:Credit\\_History\\:and\\:Property\\_Area\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:11.765164Z",
     "iopub.status.busy": "2020-09-27T23:42:11.761249Z",
     "iopub.status.idle": "2020-09-27T23:42:11.773124Z",
     "shell.execute_reply": "2020-09-27T23:42:11.772344Z"
    },
    "papermill": {
     "duration": 0.162304,
     "end_time": "2020-09-27T23:42:11.773246",
     "exception": false,
     "start_time": "2020-09-27T23:42:11.610942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.6020428719957087\n",
      "Independent (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "tbl_cArea = pd.crosstab(df['Credit_History'],df['Property_Area'])\n",
    "stat, p, dof, exptected = chi2_contingency(tbl_cArea)\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(p))\n",
    "if p <= alpha:\n",
    "    print('Dependent (reject H_0)')\n",
    "else:\n",
    "    print('Independent (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.136037,
     "end_time": "2020-09-27T23:42:12.041665",
     "exception": false,
     "start_time": "2020-09-27T23:42:11.905628",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Credit_History vs ApplicantIncome\n",
    "\n",
    "**Two sample Z-Test (ApplicantIncome splitted by Loan_Status)**\n",
    "\n",
    "$$\n",
    "H_0: \\:\\mu_{N_{applicantIncome}} =\\:\\mu_{Y_{applicantIncome}}\n",
    "\\\\H_1:\\: Negation\\:of\\:H_0\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:12.335769Z",
     "iopub.status.busy": "2020-09-27T23:42:12.325242Z",
     "iopub.status.idle": "2020-09-27T23:42:12.340364Z",
     "shell.execute_reply": "2020-09-27T23:42:12.339770Z"
    },
    "papermill": {
     "duration": 0.16168,
     "end_time": "2020-09-27T23:42:12.340518",
     "exception": false,
     "start_time": "2020-09-27T23:42:12.178838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Credit_History</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>89.0</td>\n",
       "      <td>5679.438202</td>\n",
       "      <td>9301.896041</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>2787.0</td>\n",
       "      <td>3547.0</td>\n",
       "      <td>5285.0</td>\n",
       "      <td>81000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>475.0</td>\n",
       "      <td>5426.526316</td>\n",
       "      <td>5535.393384</td>\n",
       "      <td>150.0</td>\n",
       "      <td>2908.5</td>\n",
       "      <td>3859.0</td>\n",
       "      <td>5820.0</td>\n",
       "      <td>63337.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                count         mean          std     min     25%     50%  \\\n",
       "Credit_History                                                            \n",
       "0.0              89.0  5679.438202  9301.896041  1500.0  2787.0  3547.0   \n",
       "1.0             475.0  5426.526316  5535.393384   150.0  2908.5  3859.0   \n",
       "\n",
       "                   75%      max  \n",
       "Credit_History                   \n",
       "0.0             5285.0  81000.0  \n",
       "1.0             5820.0  63337.0  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['ApplicantIncome'].groupby(df['Credit_History']).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:12.617626Z",
     "iopub.status.busy": "2020-09-27T23:42:12.616713Z",
     "iopub.status.idle": "2020-09-27T23:42:12.620520Z",
     "shell.execute_reply": "2020-09-27T23:42:12.621041Z"
    },
    "papermill": {
     "duration": 0.146804,
     "end_time": "2020-09-27T23:42:12.621199",
     "exception": false,
     "start_time": "2020-09-27T23:42:12.474395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7      3036\n",
       "17     3510\n",
       "20     7660\n",
       "22     2600\n",
       "23     3365\n",
       "       ... \n",
       "576    3087\n",
       "584    2787\n",
       "589    2726\n",
       "597    2987\n",
       "613    4583\n",
       "Name: ApplicantIncome, Length: 89, dtype: int64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_incomeN = df[(df['Credit_History'] == 0.0)]\n",
    "tbl_incomeN = tbl_incomeN['ApplicantIncome']\n",
    "tbl_incomeN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:12.909707Z",
     "iopub.status.busy": "2020-09-27T23:42:12.908650Z",
     "iopub.status.idle": "2020-09-27T23:42:12.913532Z",
     "shell.execute_reply": "2020-09-27T23:42:12.912932Z"
    },
    "papermill": {
     "duration": 0.156115,
     "end_time": "2020-09-27T23:42:12.913667",
     "exception": false,
     "start_time": "2020-09-27T23:42:12.757552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      5849\n",
       "1      4583\n",
       "2      3000\n",
       "3      2583\n",
       "4      6000\n",
       "       ... \n",
       "608    3232\n",
       "609    2900\n",
       "610    4106\n",
       "611    8072\n",
       "612    7583\n",
       "Name: ApplicantIncome, Length: 475, dtype: int64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tbl_incomeY = df[(df['Credit_History'] == 1.0)]\n",
    "tbl_incomeY = tbl_incomeY['ApplicantIncome']\n",
    "tbl_incomeY "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:13.195865Z",
     "iopub.status.busy": "2020-09-27T23:42:13.194823Z",
     "iopub.status.idle": "2020-09-27T23:42:13.198672Z",
     "shell.execute_reply": "2020-09-27T23:42:13.199486Z"
    },
    "papermill": {
     "duration": 0.149052,
     "end_time": "2020-09-27T23:42:13.199697",
     "exception": false,
     "start_time": "2020-09-27T23:42:13.050645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p value is 0.7271819479920407\n",
      "Two population means are equal (H_0 holds true)\n"
     ]
    }
   ],
   "source": [
    "ztest, pval = stests.ztest(tbl_incomeN,tbl_incomeY,value = 0, alternative = 'two-sided')\n",
    "alpha = 0.05\n",
    "print(\"p value is \" + str(pval))\n",
    "if pval <= alpha:\n",
    "    print('Two population means are not equal (reject H_0)')\n",
    "else:\n",
    "    print('Two population means are equal (H_0 holds true)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.135059,
     "end_time": "2020-09-27T23:42:13.470836",
     "exception": false,
     "start_time": "2020-09-27T23:42:13.335777",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Observation:**\n",
    "There isn't any correlation between *Credit_History* and other predictor variables."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.134762,
     "end_time": "2020-09-27T23:42:13.740973",
     "exception": false,
     "start_time": "2020-09-27T23:42:13.606211",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Imputation using Most Frequent values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:14.020014Z",
     "iopub.status.busy": "2020-09-27T23:42:14.019099Z",
     "iopub.status.idle": "2020-09-27T23:42:14.332365Z",
     "shell.execute_reply": "2020-09-27T23:42:14.331723Z"
    },
    "papermill": {
     "duration": 0.456662,
     "end_time": "2020-09-27T23:42:14.332520",
     "exception": false,
     "start_time": "2020-09-27T23:42:13.875858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 614 entries, 0 to 613\n",
      "Data columns (total 13 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Loan_ID            614 non-null    object \n",
      " 1   Gender             601 non-null    object \n",
      " 2   Married            611 non-null    object \n",
      " 3   Dependents         599 non-null    object \n",
      " 4   Education          614 non-null    object \n",
      " 5   Self_Employed      582 non-null    object \n",
      " 6   ApplicantIncome    614 non-null    int64  \n",
      " 7   CoapplicantIncome  614 non-null    float64\n",
      " 8   LoanAmount         592 non-null    float64\n",
      " 9   Loan_Amount_Term   600 non-null    float64\n",
      " 10  Credit_History     614 non-null    float64\n",
      " 11  Property_Area      614 non-null    object \n",
      " 12  Loan_Status        614 non-null    object \n",
      "dtypes: float64(4), int64(1), object(8)\n",
      "memory usage: 62.5+ KB\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.impute import SimpleImputer\n",
    "imr = SimpleImputer(missing_values = np.nan,strategy = 'most_frequent')\n",
    "imr = imr.fit(df[['Credit_History']])\n",
    "df['Credit_History'] = imr.transform(df[['Credit_History']]).ravel()\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.139433,
     "end_time": "2020-09-27T23:42:14.608613",
     "exception": false,
     "start_time": "2020-09-27T23:42:14.469180",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Deletion\n",
    "For simplicity, we will delete observations where any of the variables is missing due to MCAR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:14.900971Z",
     "iopub.status.busy": "2020-09-27T23:42:14.900076Z",
     "iopub.status.idle": "2020-09-27T23:42:14.905241Z",
     "shell.execute_reply": "2020-09-27T23:42:14.904277Z"
    },
    "papermill": {
     "duration": 0.16023,
     "end_time": "2020-09-27T23:42:14.905408",
     "exception": false,
     "start_time": "2020-09-27T23:42:14.745178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 523 entries, 1 to 613\n",
      "Data columns (total 13 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Loan_ID            523 non-null    object \n",
      " 1   Gender             523 non-null    object \n",
      " 2   Married            523 non-null    object \n",
      " 3   Dependents         523 non-null    object \n",
      " 4   Education          523 non-null    object \n",
      " 5   Self_Employed      523 non-null    object \n",
      " 6   ApplicantIncome    523 non-null    int64  \n",
      " 7   CoapplicantIncome  523 non-null    float64\n",
      " 8   LoanAmount         523 non-null    float64\n",
      " 9   Loan_Amount_Term   523 non-null    float64\n",
      " 10  Credit_History     523 non-null    float64\n",
      " 11  Property_Area      523 non-null    object \n",
      " 12  Loan_Status        523 non-null    object \n",
      "dtypes: float64(4), int64(1), object(8)\n",
      "memory usage: 57.2+ KB\n"
     ]
    }
   ],
   "source": [
    "# if proceed with dropping NaN before imputation\n",
    "# the sample size will reduce down to 480\n",
    "# yet if we drop observations where missing values are found after imputation\n",
    "# the sample size is reduced to 523 rather\n",
    "df = df.dropna()\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.137814,
     "end_time": "2020-09-27T23:42:15.189692",
     "exception": false,
     "start_time": "2020-09-27T23:42:15.051878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Outlier Treatment\n",
    "From previous analysis, where we ignored the missing-value observations, variables *ApplicantIncome, CoapplicantIncome,* and *LoanAmount* are found to have univariate outliers in the upper boundaries. Now let's see if there's any changes on outliers after our missing value treatment. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:15.489340Z",
     "iopub.status.busy": "2020-09-27T23:42:15.479511Z",
     "iopub.status.idle": "2020-09-27T23:42:15.494504Z",
     "shell.execute_reply": "2020-09-27T23:42:15.493874Z"
    },
    "papermill": {
     "duration": 0.168013,
     "end_time": "2020-09-27T23:42:15.494639",
     "exception": false,
     "start_time": "2020-09-27T23:42:15.326626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <th>LoanAmount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>523.000000</td>\n",
       "      <td>523.000000</td>\n",
       "      <td>523.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5316.097514</td>\n",
       "      <td>1604.498891</td>\n",
       "      <td>145.485660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5549.509255</td>\n",
       "      <td>2576.549437</td>\n",
       "      <td>83.223682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2885.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3850.000000</td>\n",
       "      <td>1167.000000</td>\n",
       "      <td>128.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5825.000000</td>\n",
       "      <td>2292.500000</td>\n",
       "      <td>171.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>81000.000000</td>\n",
       "      <td>33837.000000</td>\n",
       "      <td>650.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ApplicantIncome  CoapplicantIncome  LoanAmount\n",
       "count       523.000000         523.000000  523.000000\n",
       "mean       5316.097514        1604.498891  145.485660\n",
       "std        5549.509255        2576.549437   83.223682\n",
       "min         150.000000           0.000000    9.000000\n",
       "25%        2885.500000           0.000000  100.000000\n",
       "50%        3850.000000        1167.000000  128.000000\n",
       "75%        5825.000000        2292.500000  171.000000\n",
       "max       81000.000000       33837.000000  650.000000"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['ApplicantIncome','CoapplicantIncome','LoanAmount']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:15.783345Z",
     "iopub.status.busy": "2020-09-27T23:42:15.777136Z",
     "iopub.status.idle": "2020-09-27T23:42:15.913048Z",
     "shell.execute_reply": "2020-09-27T23:42:15.912285Z"
    },
    "papermill": {
     "duration": 0.280394,
     "end_time": "2020-09-27T23:42:15.913168",
     "exception": false,
     "start_time": "2020-09-27T23:42:15.632774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['ApplicantIncome'])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:16.207410Z",
     "iopub.status.busy": "2020-09-27T23:42:16.203210Z",
     "iopub.status.idle": "2020-09-27T23:42:16.212095Z",
     "shell.execute_reply": "2020-09-27T23:42:16.211481Z"
    },
    "papermill": {
     "duration": 0.159334,
     "end_time": "2020-09-27T23:42:16.212218",
     "exception": false,
     "start_time": "2020-09-27T23:42:16.052884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10234.25, 11704.0)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IQR_1 = df.ApplicantIncome.quantile(0.75) - df.ApplicantIncome.quantile(0.25)\n",
    "upper_limit_1 = df.ApplicantIncome.quantile(0.75) + (IQR_1*1.5)\n",
    "upper_limit_extreme_1 = df.ApplicantIncome.quantile(0.75) + (IQR_1*2)\n",
    "upper_limit_1, upper_limit_extreme_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:16.498482Z",
     "iopub.status.busy": "2020-09-27T23:42:16.497351Z",
     "iopub.status.idle": "2020-09-27T23:42:16.501793Z",
     "shell.execute_reply": "2020-09-27T23:42:16.501211Z"
    },
    "papermill": {
     "duration": 0.150648,
     "end_time": "2020-09-27T23:42:16.501920",
     "exception": false,
     "start_time": "2020-09-27T23:42:16.351272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outlier_count_1 = len(df[(df['ApplicantIncome'] > upper_limit_1)])\n",
    "outlier_count_1 \n",
    "# notice the number of the outliers did not change after missing-value treatment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.139913,
     "end_time": "2020-09-27T23:42:16.781719",
     "exception": false,
     "start_time": "2020-09-27T23:42:16.641806",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Trimming\n",
    "We will use Trimming here as our outlier treatment method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:17.074417Z",
     "iopub.status.busy": "2020-09-27T23:42:17.073487Z",
     "iopub.status.idle": "2020-09-27T23:42:17.078359Z",
     "shell.execute_reply": "2020-09-27T23:42:17.077645Z"
    },
    "papermill": {
     "duration": 0.157531,
     "end_time": "2020-09-27T23:42:17.078513",
     "exception": false,
     "start_time": "2020-09-27T23:42:16.920982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('mode.chained_assignment', None)\n",
    "index_1 = df[(df['ApplicantIncome'] >= upper_limit_1)].index\n",
    "#index_1\n",
    "df.drop(index_1, inplace = True)\n",
    "outlier_ct_1 = len(df[(df['ApplicantIncome'] > upper_limit_1)])\n",
    "outlier_ct_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:17.410724Z",
     "iopub.status.busy": "2020-09-27T23:42:17.409897Z",
     "iopub.status.idle": "2020-09-27T23:42:17.635405Z",
     "shell.execute_reply": "2020-09-27T23:42:17.634676Z"
    },
    "papermill": {
     "duration": 0.372634,
     "end_time": "2020-09-27T23:42:17.635548",
     "exception": false,
     "start_time": "2020-09-27T23:42:17.262914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['CoapplicantIncome'])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:17.927918Z",
     "iopub.status.busy": "2020-09-27T23:42:17.927097Z",
     "iopub.status.idle": "2020-09-27T23:42:17.935825Z",
     "shell.execute_reply": "2020-09-27T23:42:17.935241Z"
    },
    "papermill": {
     "duration": 0.158108,
     "end_time": "2020-09-27T23:42:17.935959",
     "exception": false,
     "start_time": "2020-09-27T23:42:17.777851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5842.5, 7011.0)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IQR_2 = df.CoapplicantIncome.quantile(0.75) - df.CoapplicantIncome.quantile(0.25)\n",
    "upper_limit_2 = df.CoapplicantIncome.quantile(0.75) + (IQR_2*1.5)\n",
    "upper_limit_extreme_2 = df.CoapplicantIncome.quantile(0.75) + (IQR_2*2)\n",
    "upper_limit_2, upper_limit_extreme_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:18.232124Z",
     "iopub.status.busy": "2020-09-27T23:42:18.230949Z",
     "iopub.status.idle": "2020-09-27T23:42:18.235973Z",
     "shell.execute_reply": "2020-09-27T23:42:18.235378Z"
    },
    "papermill": {
     "duration": 0.157059,
     "end_time": "2020-09-27T23:42:18.236098",
     "exception": false,
     "start_time": "2020-09-27T23:42:18.079039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outlier_count_2 = len(df[(df['CoapplicantIncome'] > upper_limit_2)])\n",
    "outlier_count_2 \n",
    "# number of outliers reduced from 17 to 16 after missing-value treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:18.533162Z",
     "iopub.status.busy": "2020-09-27T23:42:18.532202Z",
     "iopub.status.idle": "2020-09-27T23:42:18.537590Z",
     "shell.execute_reply": "2020-09-27T23:42:18.536737Z"
    },
    "papermill": {
     "duration": 0.15804,
     "end_time": "2020-09-27T23:42:18.537723",
     "exception": false,
     "start_time": "2020-09-27T23:42:18.379683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#pd.set_option('mode.chained_assignment', None)\n",
    "index_2 = df[(df['CoapplicantIncome'] >= upper_limit_2)].index\n",
    "#index_2\n",
    "df.drop(index_2, inplace = True)\n",
    "outlier_ct_2 = len(df[(df['CoapplicantIncome'] > upper_limit_2)])\n",
    "outlier_ct_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:18.839513Z",
     "iopub.status.busy": "2020-09-27T23:42:18.837906Z",
     "iopub.status.idle": "2020-09-27T23:42:18.962141Z",
     "shell.execute_reply": "2020-09-27T23:42:18.961402Z"
    },
    "papermill": {
     "duration": 0.280584,
     "end_time": "2020-09-27T23:42:18.962259",
     "exception": false,
     "start_time": "2020-09-27T23:42:18.681675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['LoanAmount'])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:19.267640Z",
     "iopub.status.busy": "2020-09-27T23:42:19.264567Z",
     "iopub.status.idle": "2020-09-27T23:42:19.272401Z",
     "shell.execute_reply": "2020-09-27T23:42:19.271688Z"
    },
    "papermill": {
     "duration": 0.165813,
     "end_time": "2020-09-27T23:42:19.272548",
     "exception": false,
     "start_time": "2020-09-27T23:42:19.106735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(242.5, 271.0)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IQR_3 = df.LoanAmount.quantile(0.75) - df.LoanAmount.quantile(0.25)\n",
    "upper_limit_3 = df.LoanAmount.quantile(0.75) + (IQR_3*1.5)\n",
    "upper_limit_extreme_3 = df.LoanAmount.quantile(0.75) + (IQR_3*2)\n",
    "upper_limit_3, upper_limit_extreme_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:19.571367Z",
     "iopub.status.busy": "2020-09-27T23:42:19.570283Z",
     "iopub.status.idle": "2020-09-27T23:42:19.574714Z",
     "shell.execute_reply": "2020-09-27T23:42:19.574121Z"
    },
    "papermill": {
     "duration": 0.157743,
     "end_time": "2020-09-27T23:42:19.574855",
     "exception": false,
     "start_time": "2020-09-27T23:42:19.417112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outlier_count_3 = len(df[(df['LoanAmount'] > upper_limit_3)])\n",
    "outlier_count_3 \n",
    "# number of outliers reduced from 30 to 23 after missing-value treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:19.877870Z",
     "iopub.status.busy": "2020-09-27T23:42:19.877033Z",
     "iopub.status.idle": "2020-09-27T23:42:19.881363Z",
     "shell.execute_reply": "2020-09-27T23:42:19.880791Z"
    },
    "papermill": {
     "duration": 0.1605,
     "end_time": "2020-09-27T23:42:19.881508",
     "exception": false,
     "start_time": "2020-09-27T23:42:19.721008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#pd.set_option('mode.chained_assignment', None)\n",
    "index_3 = df[(df['LoanAmount'] >= upper_limit_3)].index\n",
    "#index_3\n",
    "df.drop(index_3, inplace = True)\n",
    "outlier_ct_3 = len(df[(df['LoanAmount'] > upper_limit_3)])\n",
    "outlier_ct_3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.148013,
     "end_time": "2020-09-27T23:42:20.175216",
     "exception": false,
     "start_time": "2020-09-27T23:42:20.027203",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Variable Correlations After Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:20.516034Z",
     "iopub.status.busy": "2020-09-27T23:42:20.515221Z",
     "iopub.status.idle": "2020-09-27T23:42:20.541204Z",
     "shell.execute_reply": "2020-09-27T23:42:20.540257Z"
    },
    "papermill": {
     "duration": 0.193245,
     "end_time": "2020-09-27T23:42:20.541400",
     "exception": false,
     "start_time": "2020-09-27T23:42:20.348155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 442 entries, 1 to 613\n",
      "Data columns (total 13 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Loan_ID            442 non-null    object \n",
      " 1   Gender             442 non-null    int64  \n",
      " 2   Married            442 non-null    int64  \n",
      " 3   Dependents         442 non-null    int64  \n",
      " 4   Education          442 non-null    int64  \n",
      " 5   Self_Employed      442 non-null    int64  \n",
      " 6   ApplicantIncome    442 non-null    int64  \n",
      " 7   CoapplicantIncome  442 non-null    float64\n",
      " 8   LoanAmount         442 non-null    float64\n",
      " 9   Loan_Amount_Term   442 non-null    float64\n",
      " 10  Credit_History     442 non-null    float64\n",
      " 11  Property_Area      442 non-null    int64  \n",
      " 12  Loan_Status        442 non-null    int64  \n",
      "dtypes: float64(4), int64(8), object(1)\n",
      "memory usage: 48.3+ KB\n"
     ]
    }
   ],
   "source": [
    "#encoding to numeric data type\n",
    "code_numeric = {'Male':1, 'Female':2,\n",
    "               'Yes': 1, 'No':2,\n",
    "                'Graduate':1, 'Not Graduate':2,\n",
    "                'Urban':1, 'Semiurban':2, 'Rural':3,\n",
    "                'Y':1, 'N':0,\n",
    "                '3+':3 }\n",
    "df = df.applymap(lambda i: code_numeric.get(i) if i in code_numeric else i)\n",
    "df['Dependents'] = pd.to_numeric(df.Dependents)\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:20.856007Z",
     "iopub.status.busy": "2020-09-27T23:42:20.854943Z",
     "iopub.status.idle": "2020-09-27T23:42:21.478184Z",
     "shell.execute_reply": "2020-09-27T23:42:21.478793Z"
    },
    "papermill": {
     "duration": 0.789332,
     "end_time": "2020-09-27T23:42:21.478951",
     "exception": false,
     "start_time": "2020-09-27T23:42:20.689619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa023c04a90>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "matrix = np.triu(df.corr())\n",
    "fig, ax = plt.subplots(figsize = (10,10))\n",
    "sns.heatmap(df.corr(), annot = True, mask = matrix, linewidths = .5, ax = ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.148632,
     "end_time": "2020-09-27T23:42:21.776614",
     "exception": false,
     "start_time": "2020-09-27T23:42:21.627982",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion\n",
    "\n",
    "Depending on different methods of missing-value and/or outlier treatments, the level of data loss might have impact on prediction models which are used to solve the original problem. This project is only to explore the dataset and to describe dataset characterizations through data visualization and statistical techniques. Below shows how much each variable correlates with the target variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:22.083706Z",
     "iopub.status.busy": "2020-09-27T23:42:22.082779Z",
     "iopub.status.idle": "2020-09-27T23:42:22.085694Z",
     "shell.execute_reply": "2020-09-27T23:42:22.084971Z"
    },
    "papermill": {
     "duration": 0.159791,
     "end_time": "2020-09-27T23:42:22.085817",
     "exception": false,
     "start_time": "2020-09-27T23:42:21.926026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "m = matrix[:,11]\n",
    "m = pd.DataFrame(m)\n",
    "m1 = np.transpose(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:22.393389Z",
     "iopub.status.busy": "2020-09-27T23:42:22.392203Z",
     "iopub.status.idle": "2020-09-27T23:42:22.395942Z",
     "shell.execute_reply": "2020-09-27T23:42:22.395253Z"
    },
    "papermill": {
     "duration": 0.16065,
     "end_time": "2020-09-27T23:42:22.396067",
     "exception": false,
     "start_time": "2020-09-27T23:42:22.235417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "m1.columns = (df.columns[1:])\n",
    "m2 = np.transpose(m1)\n",
    "new_col = ['corr_to_Loan_Status']\n",
    "m2.columns =new_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-27T23:42:22.708523Z",
     "iopub.status.busy": "2020-09-27T23:42:22.707462Z",
     "iopub.status.idle": "2020-09-27T23:42:22.712378Z",
     "shell.execute_reply": "2020-09-27T23:42:22.711809Z"
    },
    "papermill": {
     "duration": 0.166724,
     "end_time": "2020-09-27T23:42:22.712526",
     "exception": false,
     "start_time": "2020-09-27T23:42:22.545802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>corr_to_Loan_Status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Loan_Status</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Credit_History</th>\n",
       "      <td>0.541256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Married</th>\n",
       "      <td>0.110421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Education</th>\n",
       "      <td>0.099422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <td>0.090109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Property_Area</th>\n",
       "      <td>0.064360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CoapplicantIncome</th>\n",
       "      <td>0.055412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Self_Employed</th>\n",
       "      <td>0.038612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ApplicantIncome</th>\n",
       "      <td>0.030803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dependents</th>\n",
       "      <td>0.014669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Loan_Amount_Term</th>\n",
       "      <td>0.014219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LoanAmount</th>\n",
       "      <td>0.013060</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   corr_to_Loan_Status\n",
       "Loan_Status                   1.000000\n",
       "Credit_History                0.541256\n",
       "Married                       0.110421\n",
       "Education                     0.099422\n",
       "Gender                        0.090109\n",
       "Property_Area                 0.064360\n",
       "CoapplicantIncome             0.055412\n",
       "Self_Employed                 0.038612\n",
       "ApplicantIncome               0.030803\n",
       "Dependents                    0.014669\n",
       "Loan_Amount_Term              0.014219\n",
       "LoanAmount                    0.013060"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sort predictor variables by their correlation strength to the Target variable\n",
    "m2['corr_to_Loan_Status'] = m2['corr_to_Loan_Status'].abs()\n",
    "m2.sort_values(by = new_col, ascending = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "papermill": {
   "duration": 45.562821,
   "end_time": "2020-09-27T23:42:22.970879",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2020-09-27T23:41:37.408058",
   "version": "2.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
